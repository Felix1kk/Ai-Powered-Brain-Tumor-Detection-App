# -*- coding: utf-8 -*-
"""Top G Brain Tumor App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MHXo6yR22OF1D9u7EdhzaDoZr0Oo_95R
"""


# Commented out IPython magic to ensure Python compatibility.


import streamlit as st
import google.generativeai as genai
from PIL import Image
from reportlab.lib.pagesizes import letter
from reportlab.lib.units import inch
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import Paragraph, SimpleDocTemplate, Image as RLImage, Spacer, PageBreak
import io

# Function to create PDF report
def create_pdf(report_texts, images):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)

    # Elements for the PDF
    elements = []

    # Add title header
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(name='Title', fontSize=24, leading=28, spaceAfter=12, alignment=1)  # Centered title
    elements.append(Paragraph("Brain Tumor Analysis Report", title_style))
    elements.append(Spacer(1, 24))  # Add a small spacer after the title

    normal_style = ParagraphStyle(name='Normal', fontSize=14, leading=18, spaceAfter=12)

    # Add sections for each image and corresponding report text
    for i, (report_text, image_data) in enumerate(zip(report_texts, images)):
        elements.append(Paragraph(f"Image {i+1}", normal_style))
        
        # Add the image
        image = Image.open(io.BytesIO(image_data['data']))
        image_path = f"/tmp/temp_image_{i}.png"
        image.save(image_path)
        elements.append(RLImage(image_path, width=4*inch, height=4*inch))
        
        # Add a spacer between the image and the text
        elements.append(Spacer(1, 12))
        
        # Process the report text to handle bullet points
        bullet_points = report_text.split('\n')
        for point in bullet_points:
            if point.startswith('- '):  # Bullet point check
                point = point[2:]  # Remove the bullet marker
                elements.append(Paragraph(f'â€¢ {point}', normal_style))  # Add bullet point
            else:
                elements.append(Paragraph(point, normal_style))  # Regular text
        elements.append(Spacer(1, 24))  # Add a spacer between different sections

        if i < len(report_texts) - 1:
            elements.append(PageBreak())  # Add page break between different image reports

    # Build PDF
    doc.build(elements)
    buffer.seek(0)

    return buffer

# Streamlit App Configuration
st.set_page_config(page_title="Brain Tumor Detection")

# Custom CSS to hide Streamlit icon, GitHub, and Fork icons
hide_streamlit_style = """
<style>
#MainMenu {visibility: hidden;}
footer {visibility: hidden;}
header {visibility: hidden;}
.stApp {padding-top: 0;}
</style>
"""

# Inject custom CSS
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

# Configuration
API_KEY = 'AIzaSyAyGrTbjkU6cGEVSOZB5z4E044GuNY4Z-Q'
MODEL_NAME = 'gemini-1.5-flash'

INPUT_PROMPT = """
You are an expert in understanding MRI images of the brain. 
You will receive input images as MRI images of the brain, 
and you will describe any visual features that might indicate abnormalities or tumor-like structures. 
Please focus on describing shapes, spots, patterns, or any unusual characteristics you observe.
"""

# Set up the generative AI model
try:
    genai.configure(api_key=API_KEY)
    model = genai.GenerativeModel(MODEL_NAME)
except Exception as e:
    st.error(f"Error configuring the model: {e}")

# Functions
def get_gemini_response(input_text, images, prompt):
    try:
        responses = []
        for image in images:
            response = model.generate_content([input_text, image, prompt])
            responses.append(response.text)
        return responses
    except Exception as e:
        st.error(f"Error generating content: {e}")
        return None

def input_image_setup(uploaded_files):
    if uploaded_files:
        image_parts = [
            {
                "mime_type": uploaded_file.type,
                "data": uploaded_file.getvalue()
            }
            for uploaded_file in uploaded_files
        ]
        return image_parts
    else:
        raise FileNotFoundError("No files uploaded")

# Streamlit App
st.header("Top G Brain Tumor App ðŸ§ ")

uploaded_files = st.file_uploader("Choose images...", type=["jpg", "jpeg", "png"], accept_multiple_files=True)

if uploaded_files:
    for uploaded_file in uploaded_files:
        image = Image.open(uploaded_file)
        st.image(image, caption=f"Uploaded Image: {uploaded_file.name}", use_column_width=True)

input_text = st.text_input("Input prompt:", key="input")

submit = st.button("Analyze MRI Images")

if submit:
    if not uploaded_files:
        st.info("Please upload at least one image")
    else:
        try:
            image_data = input_image_setup(uploaded_files)
            responses = get_gemini_response(input_text, image_data, INPUT_PROMPT)
            if responses:
                st.subheader("The Responses are")
                for i, response in enumerate(responses):
                    st.write(f"Response for Image {i+1}:")
                    st.write(response)

                # Generate and provide the PDF download
                pdf_buffer = create_pdf(responses, image_data)
                st.download_button(
                    label="Download Report as PDF",
                    data=pdf_buffer,
                    file_name="brain_tumor_analysis_report.pdf",
                    mime="application/pdf"
                )
        except FileNotFoundError as e:
            st.error(f"File not found: {e}")
        except Exception as e:
            st.error(f"An unexpected error occurred: {e}")
import streamlit as st
import google.generativeai as genai
from PIL import Image
from reportlab.lib.pagesizes import letter
from reportlab.lib.units import inch
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import Paragraph, SimpleDocTemplate, Image as RLImage, Spacer, PageBreak
import io

# Function to create PDF report
def create_pdf(report_texts, images):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)

    # Elements for the PDF
    elements = []

    # Add title header
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(name='Title', fontSize=24, leading=28, spaceAfter=12, alignment=1)  # Centered title
    elements.append(Paragraph("Brain Tumor Analysis Report", title_style))
    elements.append(Spacer(1, 24))  # Add a small spacer after the title

    normal_style = ParagraphStyle(name='Normal', fontSize=14, leading=18, spaceAfter=12)

    # Add sections for each image and corresponding report text
    for i, (report_text, image_data) in enumerate(zip(report_texts, images)):
        elements.append(Paragraph(f"Image {i+1}", normal_style))
        
        # Add the image
        image = Image.open(io.BytesIO(image_data['data']))
        image_path = f"/tmp/temp_image_{i}.png"
        image.save(image_path)
        elements.append(RLImage(image_path, width=4*inch, height=4*inch))
        
        # Add a spacer between the image and the text
        elements.append(Spacer(1, 12))
        
        # Process the report text to handle bullet points
        bullet_points = report_text.split('\n')
        for point in bullet_points:
            if point.startswith('- '):  # Bullet point check
                point = point[2:]  # Remove the bullet marker
                elements.append(Paragraph(f'â€¢ {point}', normal_style))  # Add bullet point
            else:
                elements.append(Paragraph(point, normal_style))  # Regular text
        elements.append(Spacer(1, 24))  # Add a spacer between different sections

        if i < len(report_texts) - 1:
            elements.append(PageBreak())  # Add page break between different image reports

    # Build PDF
    doc.build(elements)
    buffer.seek(0)

    return buffer

# Streamlit App Configuration
st.set_page_config(page_title="Brain Tumor Detection")

# Custom CSS to hide Streamlit icon, GitHub, and Fork icons
hide_streamlit_style = """
<style>
#MainMenu {visibility: hidden;}
footer {visibility: hidden;}
header {visibility: hidden;}
.stApp {padding-top: 0;}
</style>
"""

# Inject custom CSS
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

# Configuration
API_KEY = 'AIzaSyAyGrTbjkU6cGEVSOZB5z4E044GuNY4Z-Q'
MODEL_NAME = 'gemini-1.5-flash'

INPUT_PROMPT = """
You are an expert in understanding MRI images of the brain. 
You will receive input images as MRI images of the brain, 
and you will describe any visual features that might indicate abnormalities or tumor-like structures. 
Please focus on describing shapes, spots, patterns, or any unusual characteristics you observe.
"""

# Set up the generative AI model
try:
    genai.configure(api_key=API_KEY)
    model = genai.GenerativeModel(MODEL_NAME)
except Exception as e:
    st.error(f"Error configuring the model: {e}")

# Functions
def get_gemini_response(input_text, images, prompt):
    try:
        responses = []
        for image in images:
            response = model.generate_content([input_text, image, prompt])
            responses.append(response.text)
        return responses
    except Exception as e:
        st.error(f"Error generating content: {e}")
        return None

def input_image_setup(uploaded_files):
    if uploaded_files:
        image_parts = [
            {
                "mime_type": uploaded_file.type,
                "data": uploaded_file.getvalue()
            }
            for uploaded_file in uploaded_files
        ]
        return image_parts
    else:
        raise FileNotFoundError("No files uploaded")

# Streamlit App
st.header("Top G Brain Tumor App ðŸ§ ")

uploaded_files = st.file_uploader("Choose images...", type=["jpg", "jpeg", "png"], accept_multiple_files=True)

if uploaded_files:
    for uploaded_file in uploaded_files:
        image = Image.open(uploaded_file)
        st.image(image, caption=f"Uploaded Image: {uploaded_file.name}", use_column_width=True)

input_text = st.text_input("Input prompt:", key="input")

submit = st.button("Analyze MRI Images")

if submit:
    if not uploaded_files:
        st.info("Please upload at least one image")
    else:
        try:
            image_data = input_image_setup(uploaded_files)
            responses = get_gemini_response(input_text, image_data, INPUT_PROMPT)
            if responses:
                st.subheader("The Responses are")
                for i, response in enumerate(responses):
                    st.write(f"Response for Image {i+1}:")
                    st.write(response)

                # Generate and provide the PDF download
                pdf_buffer = create_pdf(responses, image_data)
                st.download_button(
                    label="Download Report as PDF",
                    data=pdf_buffer,
                    file_name="brain_tumor_analysis_report.pdf",
                    mime="application/pdf"
                )
        except FileNotFoundError as e:
            st.error(f"File not found: {e}")
        except Exception as e:
            st.error(f"An unexpected error occurred: {e}")
 
# 
# 
#














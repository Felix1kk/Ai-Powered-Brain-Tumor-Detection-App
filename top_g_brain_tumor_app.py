# -*- coding: utf-8 -*-
"""Top G Brain Tumor App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MHXo6yR22OF1D9u7EdhzaDoZr0Oo_95R
"""


# Commented out IPython magic to ensure Python compatibility.


import streamlit as st
import google.generativeai as genai
from PIL import Image
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import io

# Function to create PDF report
def create_pdf(report_text):
    buffer = io.BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter
    c.drawString(100, height - 100, "Brain Tumor Analysis Report")
    c.drawString(100, height - 120, "Analysis Results:")
    c.drawString(100, height - 140, report_text)
    c.save()
    buffer.seek(0)
    return buffer

# Streamlit App Configuration
st.set_page_config(
    page_title="Brain Tumor Detection",
    page_icon="ðŸ§ "
)

# Custom CSS to hide Streamlit icon, GitHub, and Fork icons
hide_streamlit_style = """
<style>
#MainMenu {visibility: hidden;}
footer {visibility: hidden;}
header {visibility: hidden;}
.stApp {padding-top: 0;}
</style>
"""

# Inject custom CSS
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

# Configuration
API_KEY = 'AIzaSyAyGrTbjkU6cGEVSOZB5z4E044GuNY4Z-Q'
MODEL_NAME = 'gemini-1.5-flash'

INPUT_PROMPT = """
You are an expert in understanding MRI images of the brain. 
You will receive input images as MRI images of the brain, 
and you will describe any visual features that might indicate abnormalities or tumor-like structures. 
Please focus on describing shapes, spots, patterns, or any unusual characteristics you observe.
"""

# Set up the generative AI model
try:
    genai.configure(api_key=API_KEY)
    model = genai.GenerativeModel(MODEL_NAME)
except Exception as e:
    st.error(f"Error configuring the model: {e}")

# Functions
def get_gemini_response(input_text, images, prompt):
    try:
        response = model.generate_content([input_text] + images + [prompt])
        return response.text
    except Exception as e:
        st.error(f"Error generating content: {e}")
        return None

def input_image_setup(uploaded_files):
    if uploaded_files:
        image_parts = [
            {
                "mime_type": uploaded_file.type,
                "data": uploaded_file.getvalue()
            }
            for uploaded_file in uploaded_files
        ]
        return image_parts
    else:
        raise FileNotFoundError("No files uploaded")

# Streamlit App
st.header("Top G Brain Tumor App ðŸ§ ")

uploaded_files = st.file_uploader("Choose images...", type=["jpg", "jpeg", "png"], accept_multiple_files=True)

if uploaded_files:
    for uploaded_file in uploaded_files:
        image = Image.open(uploaded_file)
        st.image(image, caption=f"Uploaded Image: {uploaded_file.name}", use_column_width=True)

input_text = st.text_input("Input prompt:", key="input")

submit = st.button("Analyze MRI Images..")

if submit:
    if not uploaded_files:
        st.info("Please upload at least one image")
    else:
        try:
            image_data = input_image_setup(uploaded_files)
            response = get_gemini_response(input_text, image_data, INPUT_PROMPT)
            if response:
                st.subheader("The Response is")
                st.write(response)

                # Generate and provide the PDF download
                pdf_buffer = create_pdf(response)
                st.download_button(
                    label="Download Report as PDF",
                    data=pdf_buffer,
                    file_name="brain_tumor_analysis_report.pdf",
                    mime="application/pdf"
                )
        except FileNotFoundError as e:
            st.error(f"File not found: {e}")
        except Exception as e:
            st.error(f"An unexpected error occurred: {e}")
 
# 
# 
#













